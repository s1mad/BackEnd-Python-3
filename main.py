'''
Лабораторная работа №3 "Функции и лямбда-выражения"
Написать следующие конструкции:
- функция без параметров
- функция с параметрами
- функция с несколькими параметрами со значениями по умолчанию
- функция с несколькими параметрами, у которых задан тип
- функция с неопределённым количеством параметров (args)
- функция с неопределённым количеством параметров (kwargs)
- функция, вызывающая внутри себя другую функцию
- функция, принимающая функцию как параметр (минимум 3 примера)
- функция с объявленной внутри локальной функцией (минимум 2 примера)
- лямбда-выражение без параметров
- лямбда-выражение с параметрами
- функция, принимающая лямбда-выражение как параметр, и вызывающая лямбда-выражение внутри себя
- функция с замыканиями (минимум 3 примера)
'''

from functions import *

if __name__ == "__main__":
    # Функции
    print(greet())  # Функция без параметров
    print(add(5, 3))  # Функция с параметрами
    print(introduce("Alice", 25))  # Функция с параметрами по умолчанию
    print(multiply(2, 4))  # Функция с типами
    print(sum_all(1, 2, 3, 4, 5))  # args
    print(print_person_info(name="John", age=30))  # kwargs

    # Вызов функции, вызывающей другую функцию
    print(outer_function())

    # Функции, принимающие другие функции
    print(apply_function(lambda x: x**2, 3))  # Передача лямбда
    print(modify_string(str.lower, "HELLO"))  # Передача встроенной функции
    print(operate_on_list(lambda x: x * 2, [1, 2, 3, 4]))  # Лямбда с итерацией

    # Локальные функции
    double = create_multiplier(2)
    print(double(5))  # Умножение на 2

    square = power_function(2)
    print(square(5))  # Возведение в квадрат

    # Лямбды
    print(no_param_lambda())
    print(sum_lambda(10, 15))

    # Применение лямбды внутри функции
    print(apply_lambda(lambda x: x * 3, 10))

    # Замыкания
    counter = closure_counter()
    print(counter())
    print(counter())

    adder = make_adder(10)
    print(adder(5))  # 10 + 5

    store = store_values()
    print(store(5))
    print(store(10))
